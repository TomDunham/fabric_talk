.. include:: <s5defs.txt>

=================================
 Fabric: Devops tool
=================================

:Authors: Tom Dunham


Fabric
======

* Fabric is an automation tool, we use it for configuation management.

.. class:: tiny

    (packages and such)

* Works by driving ``ssh``

  * You write commands in a ``fabfile`` (Python)

  * Run ``fab``, providing a list of hosts

  * Fabric ``ssh``'s to each host, runs the commands

  * *simple*.


Fabfile
=======

::

    from fabric.api import run, task

    @task
    def hello():
        run('echo hello > /tmp/hello')
        run('cat /tmp/hello')


Fabric is simple
================

* Easy to understand what happened.

* All you need to get going is to install one thing (locally).

    * (adding value quickly is good)

    * Nothing to install on the box you are managing.


Bigger Example: Riak CS
========================

* Riak, Riak CS, Stanchion

* 5 packages (control packages with some ui)

* 2 kinds of node


Riak-CS
=======

::

    @task
    @roles('cs-node')
    def install_riak():
        require.deb.package('riak')

    @task
    @roles('cs-stanchion')
    def install_stanchion():
        require.deb.package('stanchion')


Riak-CS
=======

::

    @task
    def install():
        execute(install_riak)
        execute(install_stanchion)


Riak-CS
========

* ``require`` is from ``fabtools``, a library that adds functions
  to help you write fabfiles in a declarative style

* ``roles`` filter the host list::

    env.roledefs = {
        'cs-node': 'node1', 'node2',
        'cs-stanchion': 'node1'
    }

* ``env`` is a sort-of global state object. Some of that state is
  meaningful to ``fabric``.

Riak-CS
=======

* Once you've installed, you join nodes to form a cluster::

    @task
    def join():
        pass

* Now I have two tasks


Problem: too many tasks
=======================

* Can I just run ``join`` every time I add a node?
* Is it safe to re-run the install task?
* Where do I put ``apt-get update``?
  (Takes about 30 sec to run every time, don't want that whilst
  developing)

I need to know a *lot* about the servers and the tasks to know what to
run.

(Yes, documentation helps)


Problems
========

* After a while you accumulate a lot of tasks, and it's not clear when
  they should be run.

* There isn't really a standard way to test this stuff.

(nervous)

Problems
========

* Execution time is surprisingly high
  - ``require.deb.package`` calls ``dpkg`` every time to find
  out if the package is installed. This takes about five sec, for
  three pacakges on four servers that's a minute for every run.


* What to do?

  * Move the slow stuff you run infrequently into another task?

  * Parallel mode?

No agent & no server also means no state persists across runs (so it must be rediscivered during every run).


Problems - versioning
=====================

* We version the ``fabfile`` along with the app code. (Makes sense for a
  small SASS company).

* But a ``fabfile`` is not a configuration, it's a list of commands.
  I can't '``diff``' a box against a config.

* Fabfiles are run from a dev's laptop, so I have no idea what's been
  run.


Sumup
=====

* ``fabric`` drives ``ssh``.
* Simple, lightweight.
* Imperative model, declarative libraries.


We have found
=============

* Scaling up hte number of devs and the number of servers leads to pain

* Fabric provides some help (roles, docstrings, modules & namespacing)

* Big problems are workflow related (too many tasks)


Future (fab & us)
=================

* Evaluating SCM tools (Chef, Puppet, others)

* *Fabric will still be used*

  * Manage switches
  * Imperative tasks (restart all workers, thread dump, infinate list)

Fabric is best at pulling the gaps between other tools.

